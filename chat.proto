syntax = "proto3";
package chat;

// Enumeration of potential user statuses to clearly define possible states a user can have.
// This state is not functional but represent the user's availability to receive messages.
enum UserStatus {
    ONLINE = 0;  // The user is online and available to receive messages.
    BUSY = 1;    // The user is online but marked as busy, may not respond promptly.
    OFFLINE = 2; // The user is offline and cannot receive messages.
}

// User represents the essential information about a chat user.
message User {
    string username = 1;  // Unique identifier for the user.
    string ip_address = 2;  // IP address of the user, used for server management, not exposed to other clients.
    UserStatus status = 3;  // Current status of the user, indicating availability.
}

// NewUserRequest is used to register a new user on the chat server.
message NewUserRequest {
    string username = 1;  // Desired username for the new user. Must be unique across all users.
    string ip_address = 2;  // IP address from which the user is registering.
}

// NewUserResponse communicates the outcome of a new user registration attempt.
message NewUserResponse {
    bool success = 1;  // Indicates if the registration was successful.
    string message = 2;  // Accompanying message, e.g., error details or a success confirmation.
}

// MessageRequest represents a request to send a chat message.
message SendMessageRequest {
    string recipient = 1;  // Username of the recipient. If empty, the message is broadcast to all online users.
    string content = 2;  // Content of the message being sent.
}

// MessageResponse provides feedback regarding the delivery of a chat message.
message SendMessageResponse {
    bool success = 1;  // Indicates if the message was successfully sent.
    string message = 2;  // Details about the message delivery or error information.
}

message IncomingMessageResponse {
    string sender = 1;  // Username of the user who sent the message.
    string content = 2;  // Content of the message.
}

// UserListRequest is used to fetch a list of currently connected users.
message UserListRequest {
    string username = 1;  // Specific username to fetch details for. If empty, fetches all connected users.
}

// UserListResponse returns a list of users.
message UserListResponse {
    repeated User users = 1;  // List of users meeting the criteria specified in UserListRequest.
}

// StatusUpdateRequest is used to change the status of a user.
message StatusUpdateRequest {
    string username = 1;  // Username of the user whose status is to be updated.
    UserStatus new_status = 2;  // The new status to be applied to the user.
}

// StatusUpdateResponse communicates the outcome of a status update request.
message StatusUpdateResponse {
    bool success = 1;  // Indicates whether the status update was successful.
    string message = 2;  // Details about the status update or error information.
}

// Request types consolidated into a unified structure with a type indicator.
message Request {
    enum RequestType {
        REGISTER_USER = 0;
        SEND_MESSAGE = 1;
        UPDATE_STATUS = 2;
        GET_USERS = 3;
        UNREGISTER_USER = 4;
    }
    RequestType type = 1;  // Indicates the type of request being made.

    // Different request payloads, only one of these is filled based on 'type'.
    oneof payload {
        NewUserRequest register_user = 2;
        SendMessageRequest send_message = 3;
        StatusUpdateRequest update_status = 4;
        UserListRequest get_users = 5;
        User unregister_user = 6;
    }
}

// Response is a generalized structure used for all responses from the server.
message Response {
    enum ResponseType {
        REGISTER_USER = 0;
        SEND_MESSAGE = 1;
        UPDATE_STATUS = 2;
        GET_USERS = 3;
        UNREGISTER_USER = 4;
        INCOMING_MESSAGE = 5;
    }
    ResponseType operation = 1;  // Indicates the type of operation being performed.
    int32 status_code = 2;  // HTTP-style status code indicating the overall result of the request (e.g., 200 for success, 400 for error).
    string message = 3;  // Human-readable message providing more details about the result.
    oneof result {
        NewUserResponse new_user = 4;  // Details specific to user registration operations.
        UserListResponse user_list = 5;  // Details specific to user list requests.
        SendMessageResponse send_message = 6;  // Details specific to chat message sending operations.
        StatusUpdateResponse status_update = 7;  // Details specific to user status updates.
        IncomingMessageResponse incoming_message = 8;  // Details specific to incoming chat messages.
    }
}